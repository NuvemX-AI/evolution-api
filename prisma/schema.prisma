// -------------------------------------------------------------
//  PRISMA CONFIG
// -------------------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------
//  ENUMS
// -------------------------------------------------------------
enum TriggerType {
  KEYWORD
  SCHEDULE
  WEBHOOK
  ALWAYS
}

enum TriggerOperator {
  EQUALS
  CONTAINS
  STARTS_WITH
  ENDS_WITH
}

// -------------------------------------------------------------
//  MODELS
// -------------------------------------------------------------
model Instance {
  id               String   @id @default(uuid())
  name             String   @unique
  number           String?
  token            String?
  clientName       String?
  connectionStatus String?
  profileName      String?
  profilePicUrl    String?
  integration      String?
  ownerJid         String?
  businessId       String?
  createdAt        DateTime @default(now())

  // relations
  session            Session[]
  chat               Chat[]
  contact            Contact[]
  message            Message[]
  messageUpdate      MessageUpdate[]
  webhook            Webhook[]
  chatwoot           Chatwoot[]
  proxy              Proxy[]
  rabbitmq           Rabbitmq[]
  sqs                Sqs[]
  websocket          Websocket[]
  setting            Setting[]
  integrationSession IntegrationSession[]
  dify               Dify?
  evolutionBot       EvolutionBot?
  flowise            Flowise?
  openaiBot          OpenaiBot?
  typebot            Typebot?
  label              Label[]
  pusher             Pusher?
  whatsappIntegration WhatsappIntegration[]
}

// ----------------------------------------------------------------
model Session {
  id         String   @id @default(uuid())
  sessionId  String   @unique
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id])
  creds      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Chat {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id])
}

// ----------------------------------------------------------------
model Contact {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id])
  pushName      String?   // NEW ― importadores Chatwoot / Typebot
  remoteJid     String?   // NEW
  profilePicUrl String?   // NEW (sync Chatwoot)
  identifier    String?   // NEW (bind Chatwoot)
}

// ----------------------------------------------------------------
model Message {
  id                           String   @id @default(uuid())
  instanceId                   String
  instance                     Instance @relation(fields: [instanceId], references: [id])
  key                          Json?    // NEW  (id, fromMe, remoteJid …)
  message                      Json?    // NEW  (corpo bruto Baileys)
  messageTimestamp             BigInt?  @db.BigInt // NEW
  chatwootIsRead               Boolean? // NEW
  chatwootMessageId            String?  // NEW
  chatwootConversationId       String?  // NEW
  chatwootInboxId              String?  // NEW
  chatwootContactInboxSourceId String?  // NEW
}

// ----------------------------------------------------------------
model MessageUpdate {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id])
  messageId  String?
  data       Json?
  createdAt  DateTime @default(now())
}

// ----------------------------------------------------------------
model Webhook {
  id            String   @id @default(uuid())
  instanceId    String   @unique
  instance      Instance @relation(fields: [instanceId], references: [id])
  enabled       Boolean?
  webhookBase64 Boolean?  // NEW (era String)

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Chatwoot {
  id                      String   @id @default(uuid())
  instanceId              String   @unique
  instance                Instance @relation(fields: [instanceId], references: [id])
  enabled                 Boolean?
  accountId               String?
  token                   String?
  url                     String?
  nameInbox               String?
  signMsg                 String?   // mantém String para compatibilidade
  signDelimiter           String?
  number                  String?
  reopenConversation      Boolean?
  conversationPending     Boolean?
  mergeBrazilContacts     Boolean?
  importContacts          Boolean?
  importMessages          Boolean?
  daysLimitImportMessages Int?
  organization            String?
  logo                    String?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Proxy {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id])
  enabled    Boolean?
  host       String?
  port       Int?
  protocol   String?
  username   String?
  password   String?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Rabbitmq {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id])
  url        String?
  queue      String?
  exchange   String?
  routingKey String?
  enabled    Boolean?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Sqs {
  id              String   @id @default(uuid())
  instanceId      String   @unique
  instance        Instance @relation(fields: [instanceId], references: [id])
  region          String?
  queueUrl        String?
  accessKeyId     String?
  secretAccessKey String?
  enabled         Boolean?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Websocket {
  id          String   @id @default(uuid())
  instanceId  String   @unique
  instance    Instance @relation(fields: [instanceId], references: [id])
  url         String?
  protocols   String[] @default([])
  enabled     Boolean?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Setting {
  id              String   @id @default(uuid())
  instanceId      String   @unique
  instance        Instance @relation(fields: [instanceId], references: [id])
  rejectCall      Boolean?
  msgCall         String?
  groupsIgnore    String[] @default([])
  alwaysOnline    Boolean?
  readMessages    Boolean?
  readStatus      Boolean?
  syncFullHistory Boolean?
  wavoipToken     String?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model IntegrationSession {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id])
  sessionId  String?
  botId      String?
  remoteJid  String?
  status     String?
  awaitUser  Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([instanceId])
  @@index([botId])
}

// ----------------------------------------------------------------
//  Bots – todas as integrações herdaram os mesmos extras
// ----------------------------------------------------------------
model Dify {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation(fields: [instanceId], references: [id])
  apiKey           String
  url              String
  enabled          Boolean?

  expire           Int?
  keywordFinish    String?
  delayMessage     Int?
  unknownMessage   String?
  listeningFromMe  Boolean?
  stopBotFromMe    Boolean?
  keepOpen         Boolean?
  debounceTime     Int?
  ignoreJids       String[] @default([])
  splitMessages    Boolean?
  timePerChar      Int?
  botType          String?

  setting          DifySetting[]

  @@index([instanceId])
}

model DifySetting {
  id     String @id @default(uuid())
  difyId String
  dify   Dify   @relation(fields: [difyId], references: [id])
  key    String
  value  String
}

// ----------------------------------------------------------------
model EvolutionBot {
  id               String          @id @default(uuid())
  instanceId       String          @unique
  instance         Instance        @relation(fields: [instanceId], references: [id])
  apiKey           String
  model            String?
  enabled          Boolean?

  expire           Int?
  keywordFinish    String?
  delayMessage     Int?
  unknownMessage   String?
  listeningFromMe  Boolean?
  stopBotFromMe    Boolean?
  keepOpen         Boolean?
  debounceTime     Int?
  ignoreJids       String[] @default([])
  splitMessages    Boolean?
  timePerChar      Int?

  setting          EvolutionBotSetting[]

  @@index([instanceId])
}

model EvolutionBotSetting {
  id             String        @id @default(uuid())
  evolutionBotId String
  evolutionBot   EvolutionBot  @relation(fields: [evolutionBotId], references: [id])
  key            String
  value          String
}

// ----------------------------------------------------------------
model Flowise {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation(fields: [instanceId], references: [id])
  url              String
  token            String?
  enabled          Boolean?

  expire           Int?
  keywordFinish    String?
  delayMessage     Int?
  unknownMessage   String?
  listeningFromMe  Boolean?
  stopBotFromMe    Boolean?
  keepOpen         Boolean?
  debounceTime     Int?      // NEW
  ignoreJids       String[] @default([])
  splitMessages    Boolean?
  timePerChar      Int?

  setting          FlowiseSetting[]

  @@index([instanceId])
}

model FlowiseSetting {
  id        String   @id @default(uuid())
  flowiseId String
  flowise   Flowise  @relation(fields: [flowiseId], references: [id])
  key       String
  value     String
}

// ----------------------------------------------------------------
model OpenaiBot {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation(fields: [instanceId], references: [id])
  name             String?
  enabled          Boolean?

  botType          String?
  expire           Int?
  keywordFinish    String?
  delayMessage     Int?
  unknownMessage   String?
  listeningFromMe  Boolean?
  stopBotFromMe    Boolean?
  keepOpen         Boolean?
  debounceTime     Int?
  ignoreJids       String[] @default([])
  splitMessages    Boolean?
  timePerChar      Int?

  systemMessages     Json?
  assistantMessages  Json?
  userMessages       Json?
  openaiCredsId      String?

  setting          OpenaiSetting[]
  creds            OpenaiCreds[]

  @@index([instanceId])
}

model OpenaiSetting {
  id           String    @id @default(uuid())
  openaiBotId  String
  openaiBot    OpenaiBot @relation(fields: [openaiBotId], references: [id])
  model        String
  maxTokens    Int?
}

model OpenaiCreds {
  id           String    @id @default(uuid())
  openaiBotId  String
  openaiBot    OpenaiBot @relation(fields: [openaiBotId], references: [id])
  apiKey       String
}

// ----------------------------------------------------------------
model Typebot {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation(fields: [instanceId], references: [id])
  url              String
  expire           Int?
  keywordFinish    String?
  delayMessage     Int?
  unknownMessage   String?
  listeningFromMe  Boolean?
  stopBotFromMe    Boolean?
  keepOpen         Boolean?
  debounceTime     Int?
  ignoreJids       String[] @default([])
  splitMessages    Boolean?
  timePerChar      Int?
  enabled          Boolean?

  setting          TypebotSetting[]

  @@index([instanceId])
}

model TypebotSetting {
  id        String  @id @default(uuid())
  typebotId String
  typebot   Typebot @relation(fields: [typebotId], references: [id])
  key       String
  value     String
}

// ----------------------------------------------------------------
model Label {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id])
  name       String
  color      String?
}

// ----------------------------------------------------------------
model Pusher {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id])
  enabled    Boolean?
  appId      String?
  key        String?
  secret     String?
  cluster    String?
  useTLS     Boolean?

  @@index([instanceId])
}

// ----------------------------------------------------------------
model WhatsappIntegration {
  id          String   @id @default(uuid())
  instanceId  String
  instance    Instance @relation(fields: [instanceId], references: [id])
  phoneNumber String?
  apiToken    String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([instanceId])
}
