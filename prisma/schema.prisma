// -------------------------------------------------------------
//  PRISMA CONFIG
// -------------------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou seu provider
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------
//  ENUMS
// -------------------------------------------------------------
enum TriggerType {
  keyword
  schedule
  webhook
  always
  advanced
  all
}

enum TriggerOperator {
  equals
  contains
  startsWith
  endsWith
}

enum DifyBotType {
  chat
  agent
  workflow
}

enum OpenaiBotType {
  completion
  assistant
}

// -------------------------------------------------------------
//  MODELS
// -------------------------------------------------------------
model Instance {
  id                      String    @id @default(uuid())
  name                    String    @unique
  number                  String?
  token                   String?
  clientName              String?
  connectionStatus        String?
  profileName             String?
  profilePicUrl           String?
  integration             String?
  ownerJid                String?
  businessId              String?
  disconnectionAt         DateTime?
  disconnectionReasonCode Int?
  disconnectionObject     String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // --- Relações Inversas ---
  webhook             Webhook?             @relation("InstanceWebhook")
  proxy               Proxy?               @relation("InstanceProxy")
  rabbitmq            Rabbitmq?            @relation("InstanceRabbitmq")
  sqs                 Sqs?                 @relation("InstanceSqs")
  websocket           Websocket?           @relation("InstanceWebsocket")
  setting             Setting?             @relation("InstanceSetting")
  pusher              Pusher?              @relation("InstancePusher")
  chatwoot            Chatwoot?            @relation("InstanceChatwoot")
  difySetting         DifySetting?         @relation("InstanceDifySetting")
  evolutionBotSetting EvolutionBotSetting? @relation("InstanceEvolutionBotSetting")
  flowiseSetting      FlowiseSetting?      @relation("InstanceFlowiseSetting")
  openaiSetting       OpenaiSetting?       @relation("InstanceOpenaiSetting")
  typebotSetting      TypebotSetting?      @relation("InstanceTypebotSetting")

  sessions            Session[]
  chats               Chat[]
  contacts            Contact[]
  messages            Message[]
  messageUpdates      MessageUpdate[]
  labels              Label[]
  isOnWhatsappChecks  IsOnWhatsapp[]       @relation("InstanceOnWhatsappChecks") // Relação nomeada

  difyBots            Dify[]
  evolutionBots       EvolutionBot[]
  flowiseBots         Flowise[]
  openaiBots          OpenaiBot[]
  typebots            Typebot[]
  integrationSessions IntegrationSession[]

  whatsappIntegrations WhatsappIntegration[]
  media               Media[]
  templates           Template[]

  @@index([ownerJid])
}

// ----------------------------------------------------------------
model Session {
  id         String   @id @default(uuid())
  sessionId  String   @unique
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  creds      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Chat {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  remoteJid      String
  name           String?
  labels         Json?
  unreadMessages Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([instanceId, remoteJid])
  @@index([instanceId])
  @@index([remoteJid])
}

// ----------------------------------------------------------------
model Contact {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  remoteJid     String
  pushName      String?
  profilePicUrl String?
  identifier    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([instanceId, remoteJid])
  @@index([instanceId])
  @@index([remoteJid])
}

// ----------------------------------------------------------------
model Message {
  id                       String    @id @default(uuid())
  instanceId               String
  instance                 Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  keyId                    String?   @unique
  key                      Json?
  message                  Json?
  messageTimestamp         BigInt?   @db.BigInt
  messageType              String?
  status                   String?
  participant              String?
  webhookUrl               String?
  source                   String?
  contextInfo              Json?
  integrationSessionId     String?   // FK para IntegrationSession
  integrationSession       IntegrationSession? @relation("SessionMessages", fields: [integrationSessionId], references: [id], onDelete: SetNull) // Relação nomeada

  chatwootIsRead           Boolean?
  chatwootMessageId        String?
  chatwootConversationId   String?
  chatwootInboxId          String?
  chatwootContactInboxSourceId String?

  updates                  MessageUpdate[]
  mediaId                  String?   @unique // FK para Media (1-1)
  media                    Media?    @relation("MessageMedia", fields: [mediaId], references: [id], onDelete: SetNull) // Relação nomeada

  @@index([instanceId])
  @@index([integrationSessionId])
  @@index([keyId])
  @@index([messageTimestamp])
}

// ----------------------------------------------------------------
model MessageUpdate {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messageId      String
  message        Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  keyId          String?
  remoteJid      String?
  participant    String?
  status         String?
  timestamp      BigInt?  @db.BigInt
  createdAt      DateTime @default(now())

  @@index([instanceId])
  @@index([messageId])
  @@index([keyId])
}

// --- Modelos de Configuração da Instância ---

model Webhook {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation("InstanceWebhook", fields: [instanceId], references: [id]) // Relação nomeada
  enabled        Boolean? @default(false)
  url            String?
  webhookBase64  Boolean? @default(false)
  headers        Json?
  events         String[] @default([])

  @@index([instanceId])
}

model Chatwoot {
  id                      String   @id @default(uuid())
  instanceId              String   @unique
  instance                Instance @relation("InstanceChatwoot", fields: [instanceId], references: [id]) // Relação nomeada
  enabled                 Boolean? @default(false)
  accountId               String?
  token                   String?
  url                     String?
  nameInbox               String?
  signMsg                 Boolean? @default(false)
  signDelimiter           String?  @default("\\n")
  number                  String?
  reopenConversation      Boolean? @default(false)
  conversationPending     Boolean? @default(false)
  mergeBrazilContacts     Boolean? @default(false)
  importContacts          Boolean? @default(false)
  importMessages          Boolean? @default(false)
  daysLimitImportMessages Int?     @default(90)
  organization            String?
  logo                    String?
  ignoreJids              String[] @default([])

  @@index([instanceId])
}

model Proxy {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation("InstanceProxy", fields: [instanceId], references: [id]) // Relação nomeada
  enabled    Boolean? @default(false)
  host       String?
  port       Int?
  protocol   String?
  username   String?
  password   String?

  @@index([instanceId])
}

model Rabbitmq {
  id          String   @id @default(uuid())
  instanceId  String   @unique
  instance    Instance @relation("InstanceRabbitmq", fields: [instanceId], references: [id]) // Relação nomeada
  url         String?
  exchange    String?
  enabled     Boolean? @default(false)
  events      String[] @default([])

  @@index([instanceId])
}

model Sqs {
  id              String   @id @default(uuid())
  instanceId      String   @unique
  instance        Instance @relation("InstanceSqs", fields: [instanceId], references: [id]) // Relação nomeada
  region          String?
  queueUrl        String?
  accessKeyId     String?
  secretAccessKey String?
  enabled         Boolean? @default(false)
  events          String[] @default([])

  @@index([instanceId])
}

model Websocket {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation("InstanceWebsocket", fields: [instanceId], references: [id]) // Relação nomeada
  enabled    Boolean? @default(false)
  events     String[] @default([])

  @@index([instanceId])
}

model Setting {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation("InstanceSetting", fields: [instanceId], references: [id]) // Relação nomeada
  rejectCall       Boolean? @default(false)
  msgCall          String?
  groupsIgnore     Boolean? @default(false)
  ignoredGroupJids String[] @default([])
  alwaysOnline     Boolean? @default(false)
  readMessages     Boolean? @default(false)
  readStatus       Boolean? @default(false)
  syncFullHistory  Boolean? @default(false)
  wavoipToken      String?

  @@index([instanceId])
}

model Pusher {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation("InstancePusher", fields: [instanceId], references: [id]) // Relação nomeada
  enabled    Boolean? @default(false)
  appId      String?
  key        String?
  secret     String?
  cluster    String?
  useTLS     Boolean? @default(true)
  events     String[] @default([])

  @@index([instanceId])
}

// --- Modelos de Integração (Bots) ---

model IntegrationSession {
  id                         String    @id @default(uuid())
  instanceId                 String
  instance                   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  botId                      String?   // ID do bot associado (Dify, EvolutionBot, etc.) -> NÃO USADO COMO FK DIRETA
  remoteJid                  String
  integrationSpecificSessionId String?   // ID da sessão específica da integração (ex: conversation_id Dify) - Renomeado
  pushName                   String?
  status                     String?
  awaitUser                  Boolean?  @default(false)
  type                       String?   // 'dify', 'evolution', 'openai', 'typebot', 'flowise'
  context                    Json?
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt

  // Relação inversa para Message (1-N)
  messages                   Message[] @relation("SessionMessages") // Relação nomeada

  @@index([instanceId, remoteJid, type])
  @@index([instanceId])
  @@index([botId]) // Index ainda útil para buscas por botId
  @@index([remoteJid])
}

// Modelo Dify
model Dify {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description   String?
  apiKey        String?
  apiUrl        String?
  botType       DifyBotType?
  enabled       Boolean? @default(true)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  // Relação com Fallback (via DifySetting)
  fallbackSetting DifySetting[] @relation("DifyFallback")

  // sessions        IntegrationSession[] // Relação removida

  @@index([instanceId])
  @@index([enabled])
}

// Configurações Globais/Fallback Dify por Instância
model DifySetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation("InstanceDifySetting", fields: [instanceId], references: [id]) // Relação nomeada
  difyIdFallback String?  @unique
  Fallback       Dify?    @relation("DifyFallback", fields: [difyIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// Modelo EvolutionBot
model EvolutionBot {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  apiKey         String?
  apiUrl         String?
  model          String?
  enabled        Boolean? @default(true)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  fallbackSetting EvolutionBotSetting[] @relation("EvolutionBotFallback")
  // sessions        IntegrationSession[] // Relação removida

  @@index([instanceId])
  @@index([enabled])
}

// Configurações Globais/Fallback EvolutionBot por Instância
model EvolutionBotSetting {
  id              String      @id @default(uuid())
  instanceId      String      @unique
  instance        Instance    @relation("InstanceEvolutionBotSetting", fields: [instanceId], references: [id]) // Relação nomeada
  botIdFallback   String?     @unique
  Fallback        EvolutionBot? @relation("EvolutionBotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?        @default(0)
  keywordFinish   String?
  delayMessage    Int?        @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean?    @default(false)
  stopBotFromMe   Boolean?    @default(false)
  keepOpen        Boolean?    @default(false)
  debounceTime    Int?        @default(0)
  ignoreJids      String[]    @default([])
  splitMessages   Boolean?    @default(false)
  timePerChar     Int?        @default(0)

  @@index([instanceId])
}

// Modelo Flowise
model Flowise {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  url            String
  apiKey         String?
  enabled        Boolean? @default(true)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  fallbackSetting FlowiseSetting[] @relation("FlowiseFallback")
  // sessions        IntegrationSession[] // Relação removida

  @@index([instanceId])
  @@index([enabled])
}

// Configurações Globais/Fallback Flowise por Instância
model FlowiseSetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation("InstanceFlowiseSetting", fields: [instanceId], references: [id]) // Relação nomeada
  botIdFallback  String?  @unique
  Fallback       Flowise? @relation("FlowiseFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// Modelo OpenaiBot
model OpenaiBot {
  id              String   @id @default(uuid())
  instanceId      String
  instance        Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  name            String
  description     String?
  enabled         Boolean? @default(true)

  botType         OpenaiBotType?
  model           String?
  assistantId     String?
  maxTokens       Int?
  temperature     Float?
  prompt          String?
  functionUrl     String?
  speechToText    Boolean? @default(false)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  credsId         String?
  creds           OpenaiCreds? @relation(fields: [credsId], references: [id])

  fallbackSetting OpenaiSetting[] @relation("OpenaiBotFallback")
  // sessions        IntegrationSession[] // Relação removida

  @@index([instanceId])
  @@index([enabled])
  @@index([credsId])
}

// Credenciais OpenAI
model OpenaiCreds {
  id         String      @id @default(uuid())
  name       String?
  apiKey     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  openaiBots OpenaiBot[] // Relação inversa
}

// Configurações Globais/Fallback OpenAI por Instância
model OpenaiSetting {
   id             String     @id @default(uuid())
   instanceId     String     @unique
   instance       Instance   @relation("InstanceOpenaiSetting", fields: [instanceId], references: [id]) // Relação nomeada
   botIdFallback  String?    @unique
   Fallback       OpenaiBot? @relation("OpenaiBotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

   expire          Int?     @default(0)
   keywordFinish   String?
   delayMessage    Int?     @default(1000)
   unknownMessage  String?
   listeningFromMe Boolean? @default(false)
   stopBotFromMe   Boolean? @default(false)
   keepOpen        Boolean? @default(false)
   debounceTime    Int?     @default(0)
   ignoreJids      String[] @default([])
   splitMessages   Boolean? @default(false)
   timePerChar     Int?     @default(0)
   speechToText    Boolean? @default(false)
   model           String?
   maxTokens       Int?
   temperature     Float?
   prompt          String?

   @@index([instanceId])
}

// Modelo Typebot
model Typebot {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  url            String
  typebot        String?
  enabled        Boolean? @default(true)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  fallbackSetting TypebotSetting[] @relation("TypebotFallback")
  // sessions        IntegrationSession[] // Relação removida

  @@index([instanceId])
  @@index([enabled])
}

// Configurações Globais/Fallback Typebot por Instância
model TypebotSetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation("InstanceTypebotSetting", fields: [instanceId], references: [id]) // Relação nomeada
  botIdFallback  String?  @unique
  Fallback       Typebot? @relation("TypebotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// --- Outros Modelos ---

model Label {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  labelId       String   // ID da label no WhatsApp
  name          String
  color         String?
  predefinedId  String?

  @@unique([instanceId, labelId])
  @@index([instanceId])
}

model WhatsappIntegration {
  id          String   @id @default(uuid())
  instanceId  String
  instance    Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  phoneNumber String?
  apiToken    String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([instanceId])
}

model Media {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messageId     String?  // Chave estrangeira opcional (campo simples agora)
  message       Message? @relation("MessageMedia") // Relação inversa para 1-1
  keyId         String?
  remoteJid     String?
  mediaKey      String?
  url           String?
  directPath    String?
  mimetype      String
  fileEncSha256 String?
  fileSha256    String?
  fileLength    BigInt?  @db.BigInt
  fileName      String?
  createdAt     DateTime @default(now())

  @@index([instanceId])
  @@index([keyId])
  // @@index([messageId]) // Index não necessário se for FK 1-1 em Message
}

model Template {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  name       String
  templateId String?  @unique
  language   String
  category   String?
  components Json?
  status     String?
  webhookUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([instanceId, name, language])
  @@index([instanceId])
}

model IsOnWhatsapp {
  id         String   @id @default(uuid())
  remoteJid  String   @unique
  isOnWa     Boolean
  checkedAt  DateTime @default(now())
  instanceId String? // FK opcional para Instance
  instance   Instance? @relation("InstanceOnWhatsappChecks", fields: [instanceId], references: [id], onDelete: SetNull) // Relação nomeada

  @@index([remoteJid])
  @@index([checkedAt])
  @@index([instanceId])
}
