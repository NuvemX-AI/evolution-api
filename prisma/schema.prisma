// -------------------------------------------------------------
//  PRISMA CONFIG
// -------------------------------------------------------------
generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client" // Descomente se necessário
}

datasource db {
  provider = "postgresql" // ou seu provider (mysql, sqlite)
  url      = env("DATABASE_URL")
}

// -------------------------------------------------------------
//  ENUMS
// -------------------------------------------------------------
// NOTE: Se usar string literals no código ('all', 'keyword'), defina como string no schema.
// Se usar Enum no código ($Enums.TriggerType.keyword), mantenha o Enum aqui.
// Mantendo Enum como na versão anterior, ajuste o CÓDIGO TS para usar os membros do Enum.
enum TriggerType {
  keyword
  schedule
  webhook
  always
  advanced
  all
}

enum TriggerOperator {
  equals
  contains
  startsWith
  endsWith
}

enum DifyBotType {
  chat
  agent
  workflow
}

enum OpenaiBotType {
  completion
  assistant
}

// -------------------------------------------------------------
//  MODELS
// -------------------------------------------------------------
model Instance {
  id                      String    @id @default(uuid())
  name                    String    @unique
  number                  String?
  token                   String?
  clientName              String?
  connectionStatus        String?
  profileName             String?
  profilePicUrl           String?
  integration             String?
  ownerJid                String?
  businessId              String?
  disconnectionAt         DateTime?
  disconnectionReasonCode Int?
  disconnectionObject     String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // --- Relações ---
  webhook             Webhook?
  proxy               Proxy?
  rabbitmq            Rabbitmq?
  sqs                 Sqs?
  websocket           Websocket?
  setting             Setting?
  pusher              Pusher? // Nome minúsculo

  sessions            Session[]
  chats               Chat[]
  contacts            Contact[]
  messages            Message[]
  messageUpdates      MessageUpdate[]
  labels              Label[]
  isOnWhatsappChecks  IsOnWhatsapp[]

  difyBots            Dify[]
  evolutionBots       EvolutionBot[]
  flowiseBots         Flowise[]
  openaiBots          OpenaiBot[]
  typebots            Typebot[]
  integrationSessions IntegrationSession[]

  whatsappIntegrations WhatsappIntegration[]
  media               Media[]
  templates           Template[]

  @@index([ownerJid])
}

// ----------------------------------------------------------------
model Session {
  id         String   @id @default(uuid())
  sessionId  String   @unique
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  creds      Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([instanceId])
}

// ----------------------------------------------------------------
model Chat {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  remoteJid      String
  name           String?
  labels         Json? // Pode ser String[] se preferir armazenar array de IDs
  unreadMessages Int?     @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([instanceId, remoteJid])
  @@index([instanceId])
  @@index([remoteJid])
}

// ----------------------------------------------------------------
model Contact {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  remoteJid     String
  pushName      String?
  profilePicUrl String?
  identifier    String? // Identificador Chatwoot
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([instanceId, remoteJid])
  @@index([instanceId])
  @@index([remoteJid])
}

// ----------------------------------------------------------------
model Message {
  id                       String    @id @default(uuid())
  instanceId               String
  instance                 Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  keyId                    String?   @unique // ID da mensagem Baileys
  key                      Json?
  message                  Json?
  messageTimestamp         BigInt?   @db.BigInt
  messageType              String?
  status                   String? // PENDING, SENT, DELIVERED, READ, FAILED
  participant              String? // JID do participante (grupos)
  webhookUrl               String?
  source                   String?
  contextInfo              Json?
  sessionId                String? // ID da sessão de integração ativa
  integrationSession       IntegrationSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  chatwootIsRead           Boolean?
  chatwootMessageId        String?
  chatwootConversationId   String?
  chatwootInboxId          String?
  chatwootContactInboxSourceId String?

  updates                  MessageUpdate[]
  media                    Media? // Uma mensagem pode ter uma mídia associada? Ou busca por keyId?

  @@index([instanceId])
  @@index([sessionId])
  @@index([keyId])
  @@index([messageTimestamp])
}

// ----------------------------------------------------------------
model MessageUpdate {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messageId      String   // ID da mensagem no NOSSO banco
  message        Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  keyId          String?  // ID da mensagem no WhatsApp
  remoteJid      String?
  participant    String?
  status         String? // delivered, read, played
  timestamp      BigInt?  @db.BigInt
  createdAt      DateTime @default(now())

  @@index([instanceId])
  @@index([messageId])
  @@index([keyId])
}

// --- Modelos de Configuração da Instância ---

model Webhook {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  enabled        Boolean? @default(false)
  url            String?
  webhookBase64  Boolean? @default(false) // Enviar mídia como base64? (era String)
  headers        Json?
  events         String[] @default([])

  @@index([instanceId])
}

model Chatwoot {
  id                      String   @id @default(uuid())
  instanceId              String   @unique
  instance                Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  enabled                 Boolean? @default(false)
  accountId               String?  // Manter String, converter no código
  token                   String?
  url                     String?
  nameInbox               String?
  signMsg                 Boolean? @default(false) // Alterado para Boolean?
  signDelimiter           String?  @default("\\n")
  number                  String?
  reopenConversation      Boolean? @default(false)
  conversationPending     Boolean? @default(false)
  mergeBrazilContacts     Boolean? @default(false)
  importContacts          Boolean? @default(false)
  importMessages          Boolean? @default(false)
  daysLimitImportMessages Int?     @default(90)
  organization            String?
  logo                    String?
  ignoreJids              String[] @default([])

  @@index([instanceId])
}

model Proxy {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  enabled    Boolean? @default(false)
  host       String?
  port       Int?
  protocol   String?
  username   String?
  password   String?

  @@index([instanceId])
}

model Rabbitmq {
  id          String   @id @default(uuid())
  instanceId  String   @unique
  instance    Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  url         String?
  exchange    String?
  enabled     Boolean? @default(false)
  events      String[] @default([])

  @@index([instanceId])
}

model Sqs {
  id              String   @id @default(uuid())
  instanceId      String   @unique
  instance        Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  region          String?
  queueUrl        String?
  accessKeyId     String?
  secretAccessKey String?
  enabled         Boolean? @default(false)
  events          String[] @default([])

  @@index([instanceId])
}

model Websocket {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  enabled    Boolean? @default(false)
  events     String[] @default([])

  @@index([instanceId])
}

model Setting {
  id               String   @id @default(uuid())
  instanceId       String   @unique
  instance         Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  rejectCall       Boolean? @default(false)
  msgCall          String?
  groupsIgnore     Boolean? @default(false) // Ignorar todos os grupos?
  ignoredGroupJids String[] @default([]) // JIDs específicos de grupo a ignorar
  alwaysOnline     Boolean? @default(false)
  readMessages     Boolean? @default(false)
  readStatus       Boolean? @default(false)
  syncFullHistory  Boolean? @default(false)
  wavoipToken      String?

  @@index([instanceId])
}

model Pusher {
  id         String   @id @default(uuid())
  instanceId String   @unique
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  enabled    Boolean? @default(false)
  appId      String?
  key        String?
  secret     String?
  cluster    String?
  useTLS     Boolean? @default(true)
  events     String[] @default([])

  @@index([instanceId])
}

// --- Modelos de Integração (Bots) ---

model IntegrationSession {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  botId      String? // ID do bot associado (Dify, EvolutionBot, etc.)
  remoteJid  String   // JID do usuário/chat
  sessionId  String?  // ID da sessão específica da integração (ex: conversation_id Dify)
  pushName   String?  // Nome do usuário
  status     String?  // Ex: 'opened', 'closed', 'paused', 'error'
  awaitUser  Boolean? @default(false)
  type       String?  // Tipo de integração ('dify', 'evolution', 'openai', etc.)
  context    Json?    // Contexto adicional da sessão (JSON)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relações explícitas (opcional, Prisma infere via botId)
  // dify           Dify?         @relation(fields: [botId], references: [id]) // Precisa nomear relação
  // evolutionBot   EvolutionBot? @relation(fields: [botId], references: [id]) // Precisa nomear relação
  // ... outros bots

  @@index([instanceId, remoteJid, type])
  @@index([instanceId])
  @@index([botId])
  @@index([remoteJid])
}

// Modelo Dify
model Dify {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description   String?
  apiKey        String?
  apiUrl        String?  // Adicionado
  botType       DifyBotType?
  enabled       Boolean? @default(true)

  // Configurações de comportamento
  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  // Configurações de Gatilho
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  // Relação com Fallback (via DifySetting)
  fallbackSetting DifySetting[] @relation("DifyFallback")

  // Relação com Sessões (REMOVIDA DESTE LADO)
  // sessions        IntegrationSession[] // Removido @relation(fields: [botId], references: [id])

  @@index([instanceId])
  @@index([enabled])
}

// Tabela de configurações GLOBAIS para Dify por instância (Fallback)
model DifySetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  difyIdFallback String?  @unique // Garante que só há um fallback por setting
  Fallback       Dify?    @relation("DifyFallback", fields: [difyIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// Modelo EvolutionBot
model EvolutionBot {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  apiKey         String? // API Key opcional?
  apiUrl         String? // Adicionado
  model          String?
  enabled        Boolean? @default(true)

  // Configurações de comportamento
  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  // Configurações de Gatilho
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  // Relação com Fallback (via EvolutionBotSetting)
  fallbackSetting EvolutionBotSetting[] @relation("EvolutionBotFallback")

  // Relação com Sessões (REMOVIDA DESTE LADO)
  // sessions        IntegrationSession[] // Removido

  @@index([instanceId])
  @@index([enabled])
}

// Tabela de configurações GLOBAIS para EvolutionBot por instância (Fallback)
model EvolutionBotSetting {
  id              String      @id @default(uuid())
  instanceId      String      @unique
  instance        Instance    @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  botIdFallback   String?     @unique
  Fallback        EvolutionBot? @relation("EvolutionBotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?        @default(0)
  keywordFinish   String?
  delayMessage    Int?        @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean?    @default(false)
  stopBotFromMe   Boolean?    @default(false)
  keepOpen        Boolean?    @default(false)
  debounceTime    Int?        @default(0)
  ignoreJids      String[]    @default([])
  splitMessages   Boolean?    @default(false)
  timePerChar     Int?        @default(0)

  @@index([instanceId])
}

// Modelo Flowise
model Flowise {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  url            String
  apiKey         String? // Renomeado de 'token' para consistência
  enabled        Boolean? @default(true)

  // Configurações de comportamento
  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  // Configurações de Gatilho
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  // Relação com Fallback (via FlowiseSetting)
  fallbackSetting FlowiseSetting[] @relation("FlowiseFallback")

   // Relação com Sessões (REMOVIDA DESTE LADO)
  // sessions        IntegrationSession[] // Removido

  @@index([instanceId])
  @@index([enabled])
}

// Tabela de configurações GLOBAIS para Flowise por instância (Fallback)
model FlowiseSetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  botIdFallback  String?  @unique
  Fallback       Flowise? @relation("FlowiseFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// Modelo OpenaiBot
model OpenaiBot {
  id              String   @id @default(uuid())
  instanceId      String
  instance        Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  name            String // Nome do Bot/Assistente
  description     String?
  enabled         Boolean? @default(true)

  // Configurações específicas OpenAI
  botType         OpenaiBotType?
  model           String? // Modelo (gpt-4, etc.)
  assistantId     String? // ID do Assistente OpenAI
  maxTokens       Int?
  temperature     Float?
  prompt          String? // Prompt base (completion)
  functionUrl     String? // URL para OpenAI Functions
  speechToText    Boolean? @default(false)

  // Configurações de comportamento
  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  // Configurações de Gatilho
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

   // Relação com Credenciais
  credsId         String? // Manteve opcional, mas deveria ser obrigatório?
  creds           OpenaiCreds? @relation(fields: [credsId], references: [id])

  // Relação com Fallback (via OpenaiSetting)
  fallbackSetting OpenaiSetting[] @relation("OpenaiBotFallback")

  // Relação com Sessões (REMOVIDA DESTE LADO)
  // sessions        IntegrationSession[] // Removido

  @@index([instanceId])
  @@index([enabled])
  @@index([credsId])
}

// Credenciais OpenAI (podem ser compartilhadas)
model OpenaiCreds {
  id         String      @id @default(uuid())
  name       String?     // Nome da credencial
  apiKey     String      // API Key da OpenAI
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  openaiBots OpenaiBot[] // Bots que usam esta credencial
}

// Tabela de configurações GLOBAIS para OpenaiBot por instância (Fallback)
model OpenaiSetting {
   id             String     @id @default(uuid())
   instanceId     String     @unique
   instance       Instance   @relation(fields: [instanceId], references: [id], onDelete: Cascade)
   botIdFallback  String?    @unique
   Fallback       OpenaiBot? @relation("OpenaiBotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

   // Configurações padrão que podem ser herdadas pelos bots OpenaiBot desta instância
   expire          Int?     @default(0)
   keywordFinish   String?
   delayMessage    Int?     @default(1000)
   unknownMessage  String?
   listeningFromMe Boolean? @default(false)
   stopBotFromMe   Boolean? @default(false)
   keepOpen        Boolean? @default(false)
   debounceTime    Int?     @default(0)
   ignoreJids      String[] @default([])
   splitMessages   Boolean? @default(false)
   timePerChar     Int?     @default(0)
   speechToText    Boolean? @default(false) // Pode definir padrão speechToText aqui
   model           String?  // Modelo padrão
   maxTokens       Int?     // Tokens padrão
   temperature     Float?   // Temperatura padrão
   prompt          String?  // Prompt padrão

   @@index([instanceId])
}

// Modelo Typebot
model Typebot {
  id             String   @id @default(uuid())
  instanceId     String
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  description    String?
  url            String // URL pública do fluxo
  typebot        String? // Nome/ID interno do fluxo Typebot
  enabled        Boolean? @default(true)

  // Configurações de comportamento
  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  // Configurações de Gatilho
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?

  // Relação com Fallback (via TypebotSetting)
  fallbackSetting TypebotSetting[] @relation("TypebotFallback")

   // Relação com Sessões (REMOVIDA DESTE LADO)
  // sessions        IntegrationSession[] // Removido

  @@index([instanceId])
  @@index([enabled])
}

// Tabela de configurações GLOBAIS para Typebot por instância (Fallback)
model TypebotSetting {
  id             String   @id @default(uuid())
  instanceId     String   @unique
  instance       Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  botIdFallback  String?  @unique
  Fallback       Typebot? @relation("TypebotFallback", fields: [botIdFallback], references: [id], onDelete: SetNull)

  expire          Int?     @default(0)
  keywordFinish   String?
  delayMessage    Int?     @default(1000)
  unknownMessage  String?
  listeningFromMe Boolean? @default(false)
  stopBotFromMe   Boolean? @default(false)
  keepOpen        Boolean? @default(false)
  debounceTime    Int?     @default(0)
  ignoreJids      String[] @default([])
  splitMessages   Boolean? @default(false)
  timePerChar     Int?     @default(0)

  @@index([instanceId])
}

// --- Outros Modelos ---

model Label {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  labelId       String // ID da label no WhatsApp
  name          String
  color         String?
  predefinedId  String?

  // Garante que labelId seja único por instância
  @@unique([instanceId, labelId])
  @@index([instanceId])
}

model WhatsappIntegration {
  id          String   @id @default(uuid())
  instanceId  String
  instance    Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  phoneNumber String?
  apiToken    String?
  status      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([instanceId])
}

model Media {
  id            String   @id @default(uuid())
  instanceId    String
  instance      Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  messageId     String?  // ID da mensagem associada (opcional)
  message       Message? @relation(fields: [messageId], references: [id], onDelete: SetNull) // Relação opcional
  keyId         String?  // ID da chave Baileys (pode não ser único se houver erro/retry)
  remoteJid     String?
  mediaKey      String?
  url           String?  // URL (S3 ou externa)
  directPath    String?
  mimetype      String
  fileEncSha256 String?
  fileSha256    String?
  fileLength    BigInt?  @db.BigInt
  fileName      String?
  createdAt     DateTime @default(now())

  @@index([instanceId])
  @@index([keyId])
  @@index([messageId])
}

model Template {
  id         String   @id @default(uuid())
  instanceId String
  instance   Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  name       String   // Nome do template na Meta
  templateId String?  @unique // ID do template na Meta
  language   String
  category   String?
  components Json?    // Estrutura JSON dos componentes
  status     String?
  webhookUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([instanceId, name, language])
  @@index([instanceId])
}

model IsOnWhatsapp {
  id        String   @id @default(uuid())
  remoteJid String   @unique
  isOnWa    Boolean
  checkedAt DateTime @default(now())

  @@index([remoteJid])
  @@index([checkedAt])
}

// -------------------------------------------------------------
